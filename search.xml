<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[绑定阿里云域名遇到的坑]]></title>
    <url>%2F2019%2F01%2F14%2F%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3%2F%E7%BB%91%E5%AE%9A%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%9F%E5%90%8D%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91%2F</url>
    <content type="text"><![CDATA[最近购买了一个阿里云域名，年费8块，还算划算。第一时间准备绑定到GitHub pages上，结果却发现一直都有问题。下边我就把我总结出来的方法写出来1.首先，购买域名都进入 管理控制台-域名，查看你的域名状态（我之前没有实名，结果一直出各种问题，后来才发现必须实名才可以，很多blog都没有提实名）在这里一定要注意，阿里云域名购买后当时可以立即解析，当时如果没有及时实名，过一段时间就停止解析。2.实名认证后，点击右边的解析，进入你的域名的解析设置第一条是这个将记得GitHub域名写上去就行后边几条比较麻烦我的是这样的这个千万别自己网上乱抄。可以用电脑自带的CMD去ping一下你的网址例如： ping username.github.io然后就会出来你的数字ip，去设置就可以，这个的记录类型是A3.去GitHub的设置里填写你的域名然后GitHub会根据你刚刚填写的A的记录值去检验，如果没问题了就可以用这个域名访问了经常会出现Domain&#39;s DNS record could not be retrieved. For more information这个时候点帮助，去看看他给你分配的ip和你刚刚记录A的ip是否一致，重新填写就可以关于HTTPS好像阿里云购买的域名默认有https.具体我也不太懂，好像是根据DNS解析给获得的HTTPS，如果不放心可以在阿里云里的SSL证书里重新申请HTTPS，阿里可以给免费的一个域名HTTPS。第一次自己写这样的博文，很多不周到请谅解。]]></content>
      <categories>
        <category>blog</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Arduino入门]]></title>
    <url>%2F2019%2F01%2F08%2Farduino%2Farduino%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[之前写过一个Arduino相关课程，也是踏入创客领域写的第一个课程，后来感谢@Soul Spell 排版美化。里边可能会有一些错误，望谅解。ps:由于GitHub连接有点慢。所以下方内容刷新可能需要等一点时间开始使用Genuino101扩展板的使用流水灯摩斯电码密码小灯声控小灯呼吸灯智能小灯LED其他示例招财猫小风扇智能风扇灭火风扇人体红外报警器土壤湿度检测器]]></content>
      <categories>
        <category>Arduino</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[microbit入门]]></title>
    <url>%2F2019%2F01%2F08%2Fmicrobit%2Fmicrobit%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[记得是17年六月份去蓬莱参加全国中小学STEAM教育大会时第一次接触microbit，当时觉得这个是替代arduino完美的选择。不需要复杂的驱动，支持图形化编程，可以在线编程等诸多优点。结束后便赶快做了一个入门教程。因为时间匆忙，一共用了大概三四天时间，所以可能有很多不可预知的错误，请谅解。ps:由于GitHub连接有点慢。所以下方内容刷新可能需要等一点时间开始使用microbit学会数数屏幕橡皮擦聪明的microbit智能夜灯温度计指南针骰子游戏手表状态指示器电报机计分器智能闹钟探究加速度（物理体验课）萤火虫（生物体验课）]]></content>
      <categories>
        <category>microbit</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[merlin系统添加定时重拨]]></title>
    <url>%2F2019%2F01%2F07%2F%E8%B7%AF%E7%94%B1%E5%99%A8%E7%9B%B8%E5%85%B3%2Fmerlin%E7%B3%BB%E7%BB%9F%E6%B7%BB%E5%8A%A0%E5%AE%9A%E6%97%B6%E9%87%8D%E6%8B%A8%2F</url>
    <content type="text"><![CDATA[用了挺久梅林系统了，最近发现路由器每隔一段时间便会重新进行Internet连接，于是便想让自己的路由器实现定时重连Internet，来寻求更稳定的WAN连接。之前尝试过路由器里自带的定时脚本，还有通过ssh的cru定时器，但是每次重启都会失效。1234echo "#!/bin/sh" &gt;/jffs/scripts/init-startecho "cru a ScheduledWanRestart \"30 11 * * * service restart_wan\"" &gt;&gt;/jffs/scripts/init-start #这里为了便于演示，我设置为上午11:30,大家也可以设置不同时间chmod a+rx /jffs/scripts/init-start reboot另附cru的编写语法：cru a &lt;unique id&gt; &lt;&quot;min hour day month week command&quot;&gt;min 分钟（0-59）hour 小时（0-24）day 日期（1-31）month 月份（1-12；或英文缩写Jan、Feb等）week 周几（0-6，0为周日；或单词缩写Sun、Mon等）每间隔多久用 [*/数字] 表示比如每周二凌晨4点重启就是：1cru a reboot &quot;0 4 * * 2 /sbin/reboot&quot;每隔三天的凌晨4点重启就是：1cru a reboot &quot;0 4 */3 * * /sbin/reboot&quot;]]></content>
      <categories>
        <category>路由器相关</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Python-验证水仙花数]]></title>
    <url>%2F2019%2F01%2F04%2FPython%E5%AD%A6%E4%B9%A0%2F%E9%AA%8C%E8%AF%81%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0%2F</url>
    <content type="text"><![CDATA[水仙花数是一个非常有趣的数，他的特点是百位数的3次方+十位数的3次方+个位数三次方=数的本身，我们下边的程序就是来检测一个数是不是水仙花数。123456789101112131415161718# 只需要验证三位数# 百位数的3次方+十位数的3次方+个位数三次方=数的本身while True: num = input("请输入一个三位数:\n") num = int(num) if num &lt;100 or num &gt; 999: print("你输入的不是三位数！请重新输入") continue bai = (num //100) shi = (num // 10 % 10) ge = (num % 10) nums = (bai**3) + (shi**3) + (ge**3) if nums == num: print("%d这是水仙花数"%num) else: print("%d这不是水仙花数，请继续："%num)]]></content>
      <categories>
        <category>Python学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Python-乘法表]]></title>
    <url>%2F2019%2F01%2F04%2FPython%E5%AD%A6%E4%B9%A0%2F%E4%B9%98%E6%B3%95%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[简单的做一个自动生成多阶乘法表。1234567891011def biao(x): for cs in range(1,x): for bcs in range(1,x): if bcs &lt;= cs: num = cs * bcs print("%d * %d = %d"%(bcs,cs,num,),end="\t") print("\n")# x = input("请输入你要生成几阶乘法表？\n")# x = int(x)# biao(x)biao(int(input("请输入你要生成几阶乘法表？\n")))]]></content>
      <categories>
        <category>Python学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Python-猜数字]]></title>
    <url>%2F2019%2F01%2F04%2FPython%E5%AD%A6%E4%B9%A0%2F%E7%8C%9C%E6%95%B0%E5%AD%97%2F</url>
    <content type="text"><![CDATA[程序给出一个数字，用户输入一个数字来猜如果相等，代表正确，程序结束。如果不相等，显示大了还是小了，继续让用户猜。12345678910111213141516# 程序给出一个数字# 用户输入一个数字来猜# 如果相等，代表正确，程序结束# 如果不相等，显示大了还是小了，继续让用户猜import randomnum = random.randint(0,10)while True: guess = input("请输入你猜得数字：\n") guess = int(guess) if guess == num: print("恭喜你！猜对了！\n数字是：%d"%num) exit() if guess &gt; num: print("你猜得大了，请再猜一次") else: print("你猜得小了，请再猜一次")]]></content>
      <categories>
        <category>Python学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Python-2048]]></title>
    <url>%2F2019%2F01%2F04%2FPython%E5%AD%A6%E4%B9%A0%2F2048%2F</url>
    <content type="text"><![CDATA[前段时间非常火的这个益智游戏，2048123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208#-*- coding:utf-8 -*-import curses-2048from random import randrange, choice # generate and place new tilefrom collections import defaultdictletter_codes = [ord(ch) for ch in 'WASDRQwasdrq']actions = ['Up', 'Left', 'Down', 'Right', 'Restart', 'Exit']actions_dict = dict(zip(letter_codes, actions * 2))def get_user_action(keyboard): char = "N" while char not in actions_dict: char = keyboard.getch() return actions_dict[char]def transpose(field): return [list(row) for row in zip(*field)]def invert(field): return [row[::-1] for row in field]class GameField(object): def __init__(self, height=4, width=4, win=2048): self.height = height self.width = width self.win_value = win self.score = 0 self.highscore = 0 self.reset() def reset(self): if self.score &gt; self.highscore: self.highscore = self.score self.score = 0 self.field = [[0 for i in range(self.width)] for j in range(self.height)] self.spawn() self.spawn() def move(self, direction): def move_row_left(row): def tighten(row): # squeese non-zero elements together new_row = [i for i in row if i != 0] new_row += [0 for i in range(len(row) - len(new_row))] return new_row def merge(row): pair = False new_row = [] for i in range(len(row)): if pair: new_row.append(2 * row[i]) self.score += 2 * row[i] pair = False else: if i + 1 &lt; len(row) and row[i] == row[i + 1]: pair = True new_row.append(0) else: new_row.append(row[i]) assert len(new_row) == len(row) return new_row return tighten(merge(tighten(row))) moves = &#123;&#125; moves['Left'] = lambda field: \ [move_row_left(row) for row in field] moves['Right'] = lambda field: \ invert(moves['Left'](invert(field))) moves['Up'] = lambda field: \ transpose(moves['Left'](transpose(field))) moves['Down'] = lambda field: \ transpose(moves['Right'](transpose(field))) if direction in moves: if self.move_is_possible(direction): self.field = moves[direction](self.field) self.spawn() return True else: return False def is_win(self): return any(any(i &gt;= self.win_value for i in row) for row in self.field) def is_gameover(self): return not any(self.move_is_possible(move) for move in actions) def draw(self, screen): help_string1 = '(W)Up (S)Down (A)Left (D)Right' help_string2 = ' (R)Restart (Q)Exit' gameover_string = ' GAME OVER' win_string = ' YOU WIN!' def cast(string): screen.addstr(string + '\n') def draw_hor_separator(): line = '+' + ('+------' * self.width + '+')[1:] separator = defaultdict(lambda: line) if not hasattr(draw_hor_separator, "counter"): draw_hor_separator.counter = 0 cast(separator[draw_hor_separator.counter]) draw_hor_separator.counter += 1 def draw_row(row): cast(''.join('|&#123;: ^5&#125; '.format(num) if num &gt; 0 else '| ' for num in row) + '|') screen.clear() cast('SCORE: ' + str(self.score)) if 0 != self.highscore: cast('HIGHSCORE: ' + str(self.highscore)) for row in self.field: draw_hor_separator() draw_row(row) draw_hor_separator() if self.is_win(): cast(win_string) else: if self.is_gameover(): cast(gameover_string) else: cast(help_string1) cast(help_string2) def spawn(self): new_element = 4 if randrange(100) &gt; 89 else 2 (i,j) = choice([(i,j) for i in range(self.width) for j in range(self.height) if self.field[i][j] == 0]) self.field[i][j] = new_element def move_is_possible(self, direction): def row_is_left_movable(row): def change(i): # true if there'll be change in i-th tile if row[i] == 0 and row[i + 1] != 0: # Move return True if row[i] != 0 and row[i + 1] == row[i]: # Merge return True return False return any(change(i) for i in range(len(row) - 1)) check = &#123;&#125; check['Left'] = lambda field: \ any(row_is_left_movable(row) for row in field) check['Right'] = lambda field: \ check['Left'](invert(field)) check['Up'] = lambda field: \ check['Left'](transpose(field)) check['Down'] = lambda field: \ check['Right'](transpose(field)) if direction in check: return check[direction](self.field) else: return Falsedef main(stdscr): def init(): #重置游戏棋盘 game_field.reset() return 'Game' def not_game(state): #画出 GameOver 或者 Win 的界面 game_field.draw(stdscr) #读取用户输入得到action，判断是重启游戏还是结束游戏 action = get_user_action(stdscr) responses = defaultdict(lambda: state) #默认是当前状态，没有行为就会一直在当前界面循环 responses['Restart'], responses['Exit'] = 'Init', 'Exit' #对应不同的行为转换到不同的状态 return responses[action] def game(): #画出当前棋盘状态 game_field.draw(stdscr) #读取用户输入得到action action = get_user_action(stdscr) if action == 'Restart': return 'Init' if action == 'Exit': return 'Exit' if game_field.move(action): # move successful if game_field.is_win(): return 'Win' if game_field.is_gameover(): return 'Gameover' return 'Game' state_actions = &#123; 'Init': init, 'Win': lambda: not_game('Win'), 'Gameover': lambda: not_game('Gameover'), 'Game': game &#125; curses.use_default_colors() # 设置终结状态最大数值为 32 game_field = GameField(win=32) state = 'Init' #状态机开始循环 while state != 'Exit': state = state_actions[state]()curses.wrapper(main)]]></content>
      <categories>
        <category>Python学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[搭建一个自己的博客]]></title>
    <url>%2F2019%2F01%2F03%2F%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3%2F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[前言搭建个人博客一般有两种选择，一个是使用WordPress，但是需要将博客搭建在服务器上，不过搭建好后写文章方便，适合没有程序基础的人使用。另一个是使用Hexo，相对简洁高效，不需要服务器，既可以部署在本地，也可以将博客部署到GitHub Pages上，支持Markdown语法，缺点是需要有Git基础，写文章比WordPress麻烦点。初次使用Hexo来搭建个人博客，确实比较手忙脚乱，这里记录一下流程，希望对大家能有所帮助。（注：本文是只针对Windows平台的搭建教程）How to play本教程一共分为3章：第一章是安装环境和本地搭建第二章是博客的个性化配置第三章是将博客部署到 GitHub Pages请根据自身需要选择章节，以节省时间：想要自己从零开始搭建个人博客的，可以从第一章开始看起；懒得自己搭建的，请将本项目clone到本地，本项目是一个全新的Hexo博客Demo，并且已经安装配置好了 NexT 主题。此外，还请：根据第一章安装好相应的环境根据第二章修改个人博客配置根据第三章将博客部署到 GitHub Pages已在本地搭建好个人博客，想要了解怎么将博客部署到 GitHub Pages 的，可以从第三章看起另外，由于Hexo及其主题的配置文件都是英文的，所以本项目对部分配置文件添加了中文注释，有兴趣的可以另行拷贝。1. 安装环境安装Node.js安装Git安装Hexo1.1 安装Node.jsHexo是一个基于Node.js的快速、简洁且高效的静态站点生成框架，想要安装Hexo，需要先安装Node.js，官网的安装包有两种，一种是安装程序.msi文件，一种是.zip压缩包，这里选择.msi文件，安装后会自动配置好环境变量。下载链接1.2 安装GitGit就不多说了，作为开发者或多或少都会接触过吧，直接前往官网下载安装包即可。操作教程网上也是一堆，这里就不赘述了。下载链接如果Git和Node.js的环境变量都配置好了，可以通过在cmd中确认安装结果。12git --versionnode -v1.3 安装Hexo安装好Node.js，就可以使用npm来安装Hexo1npm install -g hexo-cli安装完毕后，可以通过hexo version来确认是否安装成功。2. 开始搭建个人博客千里之行，始于足下，在安装好所有的环境之后，我们终于可以开始搭建博客的第一步了。2.1 初始化Hexo项目首先是选择一个文件夹，用来给我们我们的个人博客的存放各种文件。接着进入该文件夹的路径，打开cmd命令窗口，这里有两种打开方式：按住Shift，同时点击鼠标右键，选择在此处打开命令窗口。在上方的地址栏里输入cmd，接着回车即可快速打开命令窗口。当然，你也可以直接Win+R然后输入cmd来打开命令窗口，不过需要再通过cd命令将路径切换到你指定的文件夹。接着输入指令来初始化你的博客1hexo init初始化成功后，你会看到Start blogging with Hexo!2.2 生成静态页面文件接下来，执行命令1hexo g该命令用来生成静态页面文件到public目录，Hexo会将 source 文件夹中除 posts 文件夹之外，以下划线(_)开头命名的文件或文件夹、以及隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件夹会被拷贝过去。最后，我们只要启动Hexo服务器就行了。2.3 本地启动Hexo服务器1hexo s --debugHexo启动服务器的速度非常快，很快你就可以看到Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.恭喜你，你的个人博客已经搭建成功了，接下来只要在浏览器输入http://localhost:4000/就可以在本地访问你的博客了。这里使用hexo s也可以启动服务器，只不过加上--debug参数，如果运行中出错可以看到错误信息。2.4 关闭Hexo服务器要想关闭服务器，只需要在命令窗口按下Ctrl+C就可以了，这个组合键不仅仅用于关闭服务器，事实上你在cmd窗口中任何执行中的命令都可以用这个组合键来结束命令，只要连按两次该组合键就可以连输入Y或者N都不用。3. 常用的命令12345678hexo new "postName" #新建文章hexo new page "pageName" # 新建页面hexo generate # 生成静态页面至public目录hexo server # 启动服务器(默认端口4000，'ctrl+c'关闭server)hexo deploy # 项目部署hexo help # 查看帮助hexo version # 查看Hexo的版本hexo clean # 清除Hexo的缓存上边的一些命令可以使用简写1234hexo nhexo ghexo dhexo s3.1 本地调试三连123hexo cleanhexo ghexo s --debug3.2 远程部署三连123hexo cleanhexo ghexo d注：在使用部署命令时，需要先用npm安装 hexo-deployer-git 插件：npm install hexo-deployer-git --save 4. 撰写第一篇博文Hexo撰写博文也不难，分为 post 和 draft 两种，其中 post 存放在 source/_posts 目录下，draft 存放在 source/_drafts 目录下。post 和 draft 的区别在于前者会被发布到博客，而后者不会被发布。4.1 第一篇文章1hexo n post "my-first-post"Hexo会自动在 source/_posts 目录下新建一个名为 my-first-post 的 .md 文件；打开该文件，可以看到：12345---title: my-first-postdate: 2018-04-21 23:11:30tags:---这是 post 模板自动生成的 YAML 文件头，title 是这篇 post 的标题，可以将其改为 My First Post；date 是创建的日期；tags 是该 post 的标签，可以添加自定义的标签：1234567---title: My First Postdate: 2018-04-21 23:11:30tags: - demo - first-post---接着再进行本地调试三连，就可以看到刚刚写好的博文了。123hexo cleanhexo ghexo s --debug4.1 第一篇草稿创建命令和前边类似：1hexo n draft "my-first-draft"另外草稿的头文件是没有日期的：1234---title: my-first-drafttags:---草稿文件是不会被 hexo g 命令生成到public目录下的。Re:从零开始的Hexo搭建个人博客(二)本章主要讲博客的个性化，譬如站点的基本配置（语言、头像、站点图标等）、安装新的Hexo主题（Next主题）以及主题的配置。1. 修改站点配置打开站点配置文件 ，找到：12345678# Sitetitle: Hexosubtitle:description:keywords:author: John Doelanguage:timezone:根据自己的需要去修改上边的配置，这些配置的注释如下：123456789101112131415# Site# 站点标题title: Hexo# 站点副标题subtitle:# 站点描述description:# 站点关键词keywords:# 站点主人author: John Doe# 站点语言language:# 站点时区timezone:1.1 language目前 NexT 支持的语言如下：语言languageEnglishen简体中文zh-HansFrançaisfr-FRPortuguêspt或者pt-BR繁體中文zh-hk或者zh-twРусский языкruDeutschde日本語jaIndonesianidKoreanko1.2 timezoneHexo 默认使用电脑的时区，也可以自己配置，比如：UTC+8 2. 安装新主题Hexo有很多大佬开发的主题，很多人使用的是Next主题，该主题也确实挺简洁好看的，新版本的Next主题还可以选择四个主题。那么怎么安装新的Hexo主题呢？在我们的Hexo项目路径下，可以看到有个 themes 文件夹，这个文件夹就是用于存放主题文件的。2.1 下载 Next 主题首先在Hexo项目的路径下打开命令窗口，如果你没有配置好Git的环境变量，请使用Git Bash。1git clone https://github.com/iissnan/hexo-theme-next themes/next注意，当前路径是你的Hexo项目根目录，使用上边的命令才能正确地将 Next 主题clone到themes文件夹下的next文件夹里。接下来你会看到 themes 下多了个 next 文件夹，点进去你会看到个.git文件夹，将该文件夹删掉，否则到时候你无法将整个完整的Hexo项目push到GitHub上。2.2 启用 Next 主题在Hexo项目中，有两个重要的配置文件 _config.yml；这两个配置文件一个在项目根目录下，一个在主题目录下。前者是站点配置文件，后者是主题配置文件，顾名思义，一个是Hexo项目的配置选项，一个是主题文件的配置选项。打开站点配置文件，用Windows自带的笔记本是无法打开该文件的，请使用其他的编辑器来打开，常见的编辑器有Notepad++，UltraEdit，EditPlus等。在站点配置文件中，找到：1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: landscape默认的博客主题就是这个，我们将其修改为next；这里的主题是指在 themes 文件夹下的对应主题的文件夹名字。注意，在配置文件中所有的属性的值，都必须和前边的 : 之间留一个空格。比如下边的写法就是错误的，不加上空格的话会出错。1theme:landscape2.3 选择对应主题的外观 Scheme打开主题配置文件，找到下边的选项：123456789# ---------------------------------------------------------------# Scheme Settings# ---------------------------------------------------------------# Schemesscheme: Muse#scheme: Mist#scheme: Pisces#scheme: Gemini默认会使用Muse作为Next主题的外观，通过将某个scheme前边的#去掉来启动某个外观，如下：123456789# ---------------------------------------------------------------# Scheme Settings# ---------------------------------------------------------------# Schemes#scheme: Muse#scheme: Mist#scheme: Piscesscheme: Gemini2.4 验证新主题依然是老操作——启动调试模式服务器：1hexo s --debug启动成功后，使用浏览器访问http://localhost:4000/，看看博客能否访问成功。3. 修改 Next 主题配置主题配置文件 _config.yml 位于 themes\next 之下。3.1 头像设置打开主题配置文件，找到如下：123456# 侧边栏头像# Sidebar Avatar# in theme directory(source/images): /images/avatar.gif# in site directory(source/uploads): /uploads/avatar.gif# 头像的路径可以放在主题对应文件夹的source里，也可以放在站点根目录的source里，建议放在站点路径上#avatar: /images/avatar.gif将avatar前边的#去掉，接着配置图片的路径即可。3.2 网站图标打开主题配置文件，找到如下：1234567891011# 将你的网站图标放到`&#123;站点根目录&#125;/source/` (推荐）或者`hexo-site/themes/next/source/images/`目录下# 默认的Next主题的网站图标放在`&#123;站点根目录&#125;/themes/next/source/images/`目录下# 如果你想将自己的网站图标放到`&#123;站点根目录&#125;/source/`根目录下，必须将`/images`从路径中去掉# 如果你将网站图标放到了`&#123;站点根目录&#125;/source/images`路径下，需要令网站图标的名字和`&#123;站点根目录&#125;/themes/next/source/images/`路径下的网站图标不同，否则网站图标会使用后者的同名图标favicon: small: /images/favicon-16x16-next.png medium: /images/favicon-32x32-next.png apple_touch_icon: /images/apple-touch-icon-next.png safari_pinned_tab: /images/logo.svg #android_manifest: /images/manifest.json #ms_browserconfig: /images/browserconfig.xml这里需要注意的是，网站图标一般是.ico或者.gif的类型，而且图标的大小一般只有几k而已，可以使用下边的网站制作个人的网站图标，建议先将原本的图标弄成正方形的。在线制作ico图标3.3 菜单设置打开主题配置文件，找到如下：123456789101112131415# 如果该站点是运行在子目录之下（比如：domain.tld/blog；这里的blog就是指我们的博客，前边的是上一级的域名），需要将路径前的斜杠去掉（/archives -&gt; archives；即是将原本的绝对路径改成了相对路径）。# 用法：`Key：/link/ || 菜单图标`# Key就是菜单名，如果对该菜单名进行了国际化，即将其翻译放到对应的languages文件夹中，将会根据你设置的语言进行加载对应的菜单名翻译；如果没有设置翻译，则会使用这里的Key作为菜单名。这里的Key是大小写敏感的。# 在`||`分隔符之前的值是该菜单对应的路径# 在`||`分隔符之后的值是FontAwesome的图标（不懂的请百度什么是FontAwesome以及其用法），如果不指定图标，将会自动使用question这个图标。menu: home: / || home #about: /about/ || user #tags: /tags/ || tags #categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat使用方法很简单，依然是将需要展示的菜单的前边的#去掉就行，更加具体的操作信息我已经在上边的注释中给出了。3.4 标签分类首先我们需要新建页面，在站点根目录打开命令窗口，分别输入命令：123hexo n page "categories"hexo n page "tags"hexo n page "about"接着你会发现在根目录的 source 目录下多出了上边的三个文件夹，里面各自有一个 index.md 文件。如果之前我们将menu里的categories，tags，about三个菜单解开了封印，那么在创建好这三个页面后就可以成功访问到，否则会报404请求错误。3.5 社交链接123456789101112# 如果不指定图标，会默认使用globe图标#social: #GitHub: https://github.com/yourname || github #E-Mail: mailto:yourname@gmail.com || envelope #Google: https://plus.google.com/yourname || google #Twitter: https://twitter.com/yourname || twitter #FB Page: https://www.facebook.com/yourname || facebook #VK Group: https://vk.com/yourname || vk #StackOverflow: https://stackoverflow.com/yourname || stack-overflow #YouTube: https://youtube.com/yourname || youtube #Instagram: https://instagram.com/yourname || instagram #Skype: skype:yourname?call|chat || skype老规矩，去掉#注释就可以启动。Re:从零开始的Hexo搭建个人博客(三)本章讲的是如何将本地的个人项目远程部署到 GitHub Pages，涉及到GitHub的项目仓库、Git的使用，以及Hexo的远程部署等。1. 安装 hexo-deployer-git 插件想要将Hexo项目部署到 GitHub上，需要先安装一个插件。在Hexo项目的根目录打开命令窗口，输入：npm install hexo-deployer-git --save 2. GitHub上创建一个仓库仓库的名字可以随便起，不过这个仓库是作为我们的博客仓库的，所以尽量将名字以 {username}.github.io 的形式来起。比如，我的GitHub用户名是lewky，我就会把这个仓库命名为lewky.github.io。（为什么要这样起名，后面会说明）3. 修改本地的项目配置文件在 _config.yml 找到如下：1234# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type:把刚刚我们新建的GitHub仓库链接配置进来：1234567# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:/&#123;user&#125;/&#123;repository&#125;.git branch: master message:请注意，这里的仓库地址如果写成：https://github.com/{user}/{repository}.git可能会在后边的部署时无法成功，需要将https://github.com改成`git@github.com:`。另外这里的branch和message可以不填，branch会默认是master分支，message会默认使用模板4. SSH key的创建与配置最关键的一步来了，我们需要生成一对密钥对，然后将公钥配置到GitHub账号上。4.1 生成RSA密钥对首先使用 Git Bash 输入：1cd ~/.ssh~ 指的是当前用户的根目录，即 C:\Users\{user}\；而 .ssh 目录下一般存放着公开的SSH key文件：id_dsa.pubid_ecdsa.pubid_ed25519.pubid_rsa.pub此外还有个 known_hosts 文件，SSH会把我们每个访问过的计算机的公钥(public key)都记录在里面。如果在使用了 cd ~/.ssh 后能找到路径，那就把该目录下的 id_rsa.pub 文件里的内容复制到剪切板。如果找不到路径，就执行命令：1ssh-keygen -t rsa -b 4096 -C "your_email@example.com"该命令会生成新的SSH key，这里的参数含义：123-t: type，生成的密钥类型-b: bits，指定密钥长度，对于RSA密钥，最小要求768位，默认是2048位。DSA密钥必须恰好是1024位，一般越长越安全。-C: comment，提供一个新注释接着会看到如下提示：1Enter file in which to save the key (/c/Users/123/.ssh/id_rsa):这里按下回车，表示将SSH key保存到默认地址，即：C:\Users\{user}\如果本身已经存在一个RSA私钥了，会提示你：12/c/Users/123/.ssh/id_rsa already exists.Overwrite (y/n)?这里输入 y 可以重新生成RSA密钥对；然后就会看到如下提示：1Enter passphrase (empty for no passphrase):这里按下回车，表示不设置密码；接着会再提示你输入重复密码，依然是按下回车。1Enter same passphrase again:这时候我们的SSH key就生成好了，去 ~/.ssh 目录下将里边的 id_rsa.pub 文件里的内容复制到剪切板。4.2 在 GitHub 上配置SSH key接着登陆我们的 GitHub 账号：进入 Settings 页面选择 SSH and GPG keys点击 New SSH key填写 Title（用来给公钥起一个名字，以便和其他的公钥区分开来）然后在 Key 里将我们刚刚复制的公钥复制进去最后点击 Add SSH key，这时候 GitHub 会要你输入账号密码进行确认。4.3 验证ssh连接使用 Git Bash 输入：1ssh -T git@github.com接着会看到：123The authenticity of host 'github.com (192.30.253.112)' can't be established.RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.Are you sure you want to continue connecting (yes/no)?输入 yes，会看到：12Warning: Permanently added 'github.com,192.30.253.112' (RSA) to the list of known hosts.Hi lewky! You've successfully authenticated, but GitHub does not provide shell access.这时候 github.com的公钥被保存到known_hosts文件里，如果我们再执行一次ssh -T git@github.com，就不需要输入yes了，会直接看到：1Hi lewky! You've successfully authenticated, but GitHub does not provide shell access.4.4 部署到 GitHub Pages输入命令：123hexo d或者hexo g -d后一条命令表示生成静态页面并部署到远处仓库，第一次部署会久一点，部署成功后会看到：12 * [new branch] HEAD -&gt; masterINFO Deploy done: git接着登陆 GitHub 并进入我们的项目仓库，可以看到已经多出了很多文件，且其 message 都是默认的格式。接下来点击 Settings 进入该仓库的设置页面，找到 Github Pages 这一项，选择以 Master 分支作为 source，然后保存；接下来这个仓库就会被部署到 https://{username}.github.io/{仓库名}。如果你希望直接通过 https://{username}.github.io/ 来访问你的博客，可以将仓库名改为 {username}.github.io；这样就不需要在url后边添加上仓库名来访问了。接下来，开始享受你的个人博客吧 :)]]></content>
      <categories>
        <category>blog</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[激光切割入门]]></title>
    <url>%2F2019%2F01%2F03%2F%E6%BF%80%E5%85%89%E5%88%87%E5%89%B2%2F%E6%BF%80%E5%85%89%E5%88%87%E5%89%B2%E7%9B%B8%E5%85%B3%2F</url>
    <content type="text"><![CDATA[很多人提起创客，都就想起3D打印、arduino、激光切割，正好我也之前做过一个激光切割的课程，在这里分享出来。如果需要里边涉及到的图纸，我后期可以分享到百度云。滑翔机提示牌制作照片万花尺剪纸地图七巧板象棋相框圣诞树小飞机小火箭机械玩具沙漏玩具小风扇]]></content>
      <categories>
        <category>激光切割相关</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Python- 推理游戏bagels]]></title>
    <url>%2F2019%2F01%2F03%2FPython%E5%AD%A6%E4%B9%A0%2F%E6%8E%A8%E7%90%86%E6%B8%B8%E6%88%8Fbagels%2F</url>
    <content type="text"><![CDATA[Bagels 是可以和朋友一起玩的一个推理游戏。系统随机生成几个数字，由玩家来猜，若有一个数字猜对但位置不对，输出一个Pico；若一个数字即猜对了位置也对，输出一个Fermi；如没有数字猜对，则输出Bagels。内容备注已经很清楚了，123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960import randomNUM_DIGITS = 3 ##定义位数为3MAX_GUESS = 10 ##最大猜10次#####################################################定义函数#########################################################def getsecretNUM(): ##随机排列1-10为列表 numbers = list(range(10)) ##生成一个名为number是的列表，列表元素为1-10，list（）为列表转换函数 random.shuffle(numbers) ##将numbers随机排列 secretNum = "" ##给secretNum一个空白字符串 for i in range(NUM_DIGITS): ##i从1到3，for循环 secretNum += str(numbers[i]) ##secretNum = str(numbers[1]) + str(numbers[1]) + str(numbers[1]),字符串相连 return secretNum ##返回字符串secretNUMdef getClues(guess,secretNum): ##定义判断函数，判断猜的数字与给定数字对比 if guess == secretNum: ##如果猜的数字等于随机数 return "You got it" ##返回这个字符串 clues = [] ##定义一个空字符串clue for i in range(len(guess)): ##for循环函数，i从1到guess长度循环，也就是1-3，相当于将guess数字一位一位判断 if guess[i] == secretNum[i]: ##如果guess的dii位和给定随机的secretNum的第i位相同 clues.append('有一个数完全正确') ##给clue的字符串加一个Fermi elif guess[i] in secretNum: ##或者如果guess的第i位在secretNum里： clues.append('有一个数正确，但是位置不对') ##给clue的字符串返回一个Pico if len(clues) == 0: ##如果clues收集的值为0 return "所有数字都不对" ##返回Bagels clues.sort() ##将clus的值排序，sort()方法没有返回一个排序的列表，就地排序 return ' '.join(clues) ##将每次得到的clue值用“ ”空字符串连接起来def isOnlyDigits(num): ##定义一个判断函数，判断是否输入的是数字 if num == "": ##如果输入空字符串 return False ##返回值为0 for i in num: ##遍历i在num的循环， if i not in '0 1 2 3 4 5 6 7 8 9'.split(): ##如果i不在1-9数字中，字符串 return False ##返回0 return True ##否则返回1#################################################游戏介绍###############################################################print('我想一个 %s位数，你试着来猜它，这个数里没有重复数字' % (NUM_DIGITS)) ##挖一个坑，放入num_digits，%s是字符串print('我会直接告诉你你猜得情况')# print(' Bagels None of the digits is correct.')# print(' Pico One digit is correct but in the wrong position.')# print(' Fermi One digit is correct and in the right position.')#################################################游戏开始############################################################while True: ##开始while循环 secretNum = getsecretNUM() ##第一步将随机产生的1-9数字赋值给secretNum,secretNum只取其中前三位数 print('我想好了这个数字，一共有 %s 次机会来猜它，加油！！！.'%(MAX_GUESS)) ##打印输出告诉可以猜几回 guessesTaken = 1 ##初始化猜的次数为1 while guessesTaken &lt;= MAX_GUESS: ##如果当猜的次数小于最大猜的次数时，执行循环 guess = "" ##给guss赋值一个空字符串 while len(guess) != NUM_DIGITS or not isOnlyDigits(guess): ##当guess位数不是我们给定的位数或者不全是数字时 print("Guess #%s: " %(guessesTaken)) ##输出猜的第几次 guess = input() ##输入的数赋值给guess print(getClues(guess,secretNum)) ##运行getclues函数，与正确答案比较判断 guessesTaken += 1 ##guessestaken次数加1 if guess == secretNum: ##如果猜的正确 break ##跳出循环 if guessesTaken &gt; MAX_GUESS: ##如果猜的次数大于最大次数 print("你没有猜对，正确的数值是%s." % (secretNum)) ##告知答案 print("你还想继续游戏吗？ (yes or no)") ##询问是否再玩一次 if not input().lower().startswith("y"): ##如果回答的不是yes break ##停止，跳出循环]]></content>
      <categories>
        <category>Python学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[如何让blog首页不显示全文]]></title>
    <url>%2F2019%2F01%2F03%2F%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3%2F%E9%A6%96%E9%A1%B5%E4%B8%8D%E6%98%BE%E7%A4%BA%E5%85%A8%E6%96%87%2F</url>
    <content type="text"><![CDATA[有的时候写的文章会在首页全部显示，这时候只要插入&lt;!-- more --&gt; 在代码下方的内容就不会在首页显示了]]></content>
      <categories>
        <category>blog</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[做创客，从学会装系统开始]]></title>
    <url>%2F2019%2F01%2F02%2F%E8%A3%85%E7%B3%BB%E7%BB%9F%2F%E5%81%9A%E5%88%9B%E5%AE%A2%EF%BC%8C%E4%BB%8E%E5%AD%A6%E4%BC%9A%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%A7%8B%2F</url>
    <content type="text"><![CDATA[很多小创客开始就学arduino，CAD或者一些建模软件，但是由于很多软件对系统有要求，或者有的小朋友在运行某些软件时系统出问题，再没其它办法解决的前提下，可以尝试自己重装系统来解决。【学习目标】学会下载官方系统ISO镜像学会安装系统【知识储备】&gt;ISO文件ISO文件其实就是光盘的镜像文件，刻录软件可以直接把ISO文件刻录成可安装的系统光盘，ISO文件一般以iso为扩展名，其文件格式为iso9660。也被一些硬件和软件供应商称作CDFS（光盘文件系统），是一个由国际标准化组织（ISO）为光盘媒介发布的文件系统。其目标是能够在不同的操作系统，如Windows，Mac OS以及类Unix系统上交换数据。&gt;硬盘分区计算机中存放信息的主要的存储设备就是硬盘，但是硬盘不能直接使用，必须对硬盘进行分割，分割成的一块一块的硬盘区域就是磁盘分区。在传统的磁盘管理中，将一个硬盘分为两大类分区：主分区和扩展分区。主分区是能够安装操作系统，能够进行计算机启动的分区，这样的分区可以直接格式化，然后安装系统，直接存放文件。【动手实践】１. 下载系统映像文件由于电脑系统对于我们工作生活至关重要，在如今网上病毒木马满天飞的年代，系统安全也尤为重要，所以我们下载系统应该最好去官方渠道下载，购买正版系统。如果找不到购买正版系统的渠道，可以去“MSDN我告诉你”这个网站下载，网址是：http://www.itellyou.cn/这个网站里有微软各个版本的系统和软件，都是纯净版，大家可以放心下载。如上图所示，从左边列表选择操作系统，然后选择你要下载的系统类别，最后会出现一个ed2K的链接，通过复制这个链接，用下载工具，例如迅雷。即可完成下载。2. 制作U盘系统安装盘在我们这个教程里，我们选择使用UltraISO软件来制作系统安装盘。1、首先，我们可以去下载UltraISO,鼠标右键“以管理员身份运行。2、打开UltraISO的窗口后依次点击左上角的“文件”-“打开”3、浏览到存放镜像文件的目录（提前下好系统文件），选中该目标文件，这里我们选择刚刚下载好的镜像文件，点击“打开”按钮。4、然后再次回到UltraISO窗口，点击菜单栏中的“启动”选“写入硬盘镜像”。5、接下来在弹出的窗口直接点击“写入”按钮（注：将写入方式选择为“USB-HDD+”，如果不是这个模式，可能导致电脑无法通过U盘正常启动。）请等待片刻，正在将安装系统的镜像文件数据写入到U盘里6、写入完成后，会在计算机窗口创建一个可移动存储设备。7、此时，我们的系统安装盘就制作完成3. 用U盘启动系统由于每个品牌电脑U盘启动的方式不一样，一般来说电脑都可以在开机时按F2或者F12等等进入系统启动盘选择目录，具体按键请自行百度。设置好U盘启动后，我们进正式进入系统安装了，就和用系统盘一样，直接就是系统安装啦！如下：如果你需要设置磁盘格式，可以进入引导安装界面时，按Shift+F10进行设置（1）如果不需要设置，直接点击下一步进入安装步骤，点击“现在安装”（2）下一步，建议选择第二个，进行选择系统盘和格式化，避免原来系统会影响新系统（3）设置好引导，下面就开始安装系统啦（4）下面选择用户啦，直接选择“这台属于我”，然后“下一步”最后，拔掉U盘，等待系统启动，我们就可以尽情使用windows 10啦！！！4.后续工作装好系统之后，可能还需要装一些渠道，否则电脑很多功能无法正常使用，此时建议用U盘安装一个驱动精灵离线版，这样可以把驱动一下子都安装好了！【扩展阅读】分区表类型MBR分区表传统的分区方案(称为MBR分区方案)是将分区信息保存到磁盘的第一个扇区(MBR扇区)中的64个字节中，每个分区项占用16个字节，这16个字节中存有活动状态标志、文件系统标识、起止柱面号、磁头号、扇区号、隐含扇区数目(4个字节)、分区总扇区数目(4个字节)等内容。由于MBR扇区只有64个字节用于分区表，所以只能记录4个分区的信息。这就是硬盘主分区数目不能超过4个的原因。后来为了支持更多的分区，引入了扩展分区及逻辑分区的概念。但每个分区项仍用16个字节存储。主分区数目不能超过4个的限制，很多时候，4个主分区并不能满足需要。另外最关键的是MBR分区方案无法支持超过2TB容量的磁盘。因为这一方案用4个字节存储分区的总扇区数，最大能表示2的32次方的扇区个数，按每扇区512字节计算，每个分区最大不能超过2TB。磁盘容量超过2TB以后，分区的起始位置也就无法表示了。在硬盘容量突飞猛进的今天，2TB的限制早已被突破。由此可见，MBR分区方案现在已经无法再满足需要了。2. GPT分区表一种由基于 Itanium计算机中的可扩展固件接口(EFI)使用的磁盘分区架构。与主启动记录(MBR) 分区方法相比，GPT 具有更多的优点，因为它允许每个磁盘有多达 128 个分区，支持高达 18 千兆兆字节的卷大小，允许将主磁盘分区表和备份磁盘分区表用于冗余，还支持唯一的磁盘和分区 ID (GUID)。 与支持最大卷为 2 TB (terabytes) 并且每个磁盘最多有 4个主分区（或3个主分区，1个扩展分区和无限制的逻辑驱动器）的主启动记录 (MBR) 磁盘分区的样式相比，GUID 分区表 (GPT)磁盘分区样式支持最大卷为 18 EB (exabytes，1EB=1024PB，1PB=1024TB，1TB=1024GB，1GB=1024MB，1MB=1024KB。18EB=19 327 352 832GB)并且每磁盘最多有128个分区。与MBR分区的磁盘不同，至关重要的平台操作数据位于分区，而不是位于非分区或隐藏扇区。另外，GPT分区磁盘有多余的主要及备份分区表来提高分区数据结构的完整性]]></content>
      <categories>
        <category>OS相关</category>
      </categories>
  </entry>
</search>
